function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    Base.precompile(Tuple{typeof(vfmadd_fast),VecUnroll{3, 8, Float32, Vec{8, Float32}},VecUnroll{3, 8, Float32, Vec{8, Float32}},VecUnroll{3, 8, Float32, Vec{8, Float32}}})   # time: 0.2730614
    Base.precompile(Tuple{typeof(which(transpose_vecunroll,(VectorizationBase.VecUnroll{N, W, T, V} where {T, V<:Union{Bool, Float16, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, SIMDTypes.Bit, VectorizationBase.AbstractSIMD{W, T}}},)).generator.gen),Any,Any,Any,Any})   # time: 0.1937142
    Base.precompile(Tuple{typeof(>=),UInt32,MM{8, 1, UInt32}})   # time: 0.1688697
    Base.precompile(Tuple{typeof(transpose_vecunroll),VecUnroll{1, 1, Float32, Float32}})   # time: 0.1088855
    Base.precompile(Tuple{typeof(which(_vstore_unroll!,(LayoutPointers.AbstractStridedPointer{T, D, C, B, R, X, O} where {R, X<:Tuple{Vararg{Integer, D}}, O<:Tuple{Vararg{Integer, D}}},VectorizationBase.VecUnroll{Nm1, W, VUT, var"#s31"} where var"#s31"<:Union{Bool, Float16, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, SIMDTypes.Bit, VectorizationBase.AbstractSIMDVector},VectorizationBase.Unroll{AU, F, N, AV, W, M, UX, I<:Union{Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt, VectorizationBase.LazyMulAdd{var"#s33", var"#s32", var"#s31"} where {var"#s33", var"#s32", var"#s31"<:Union{Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt}}, Union{VectorizationBase.LazyMulAdd{var"#s33", var"#s32", var"#s31"} where {var"#s33", var"#s32", var"#s31"<:Union{VectorizationBase.MM{W, X, I} where {X, I<:Union{Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt}}, VectorizationBase.Vec{W, T} where T}}, VectorizationBase.MM{W, X, I} where {X, I<:Union{Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt}}, VectorizationBase.Vec{W, T} where T} where W}},A<:Static.StaticBool,S<:Static.StaticBool,NT<:Static.StaticBool,Static.StaticInt{RS},Nothing,)).generator.gen),Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Type,Type,Type,Type,Any})   # time: 0.0547732
    Base.precompile(Tuple{typeof(prefetch),Ptr{Float32}})   # time: 0.0369287
    Base.precompile(Tuple{typeof(which(_vstore_unroll!,(LayoutPointers.AbstractStridedPointer{T, D, C, B, R, X, O} where {R, X<:Tuple{Vararg{Integer, D}}, O<:Tuple{Vararg{Integer, D}}},VectorizationBase.VecUnroll{Nm1, W, VUT, VUV<:Union{Bool, Float16, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, SIMDTypes.Bit, VectorizationBase.AbstractSIMDVector}},VectorizationBase.Unroll{AU, F, N, AV, W, M, UX, I<:Union{Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt, VectorizationBase.LazyMulAdd{var"#s33", var"#s32", var"#s31"} where {var"#s33", var"#s32", var"#s31"<:Union{Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt}}, Union{VectorizationBase.LazyMulAdd{var"#s33", var"#s32", var"#s31"} where {var"#s33", var"#s32", var"#s31"<:Union{VectorizationBase.MM{W, X, I} where {X, I<:Union{Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt}}, VectorizationBase.Vec{W, T} where T}}, VectorizationBase.MM{W, X, I} where {X, I<:Union{Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt}}, VectorizationBase.Vec{W, T} where T} where W}},VectorizationBase.EVLMask{W, U} where U,A<:Static.StaticBool,S<:Static.StaticBool,NT<:Static.StaticBool,Static.StaticInt{RS},Static.StaticInt{X},)).generator.gen),Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Type,Type,Type,Type,Any})   # time: 0.0283977
    Base.precompile(Tuple{typeof(which(offsetprecalc,(LayoutPointers.AbstractStridedPointer{T, N, C, B, R, X, O},Val{descript},)).generator.gen),Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any})   # time: 0.0212967
    Base.precompile(Tuple{typeof(vfmadd_fast),VecUnroll{1, 8, Float32, Vec{8, Float32}},Vec{8, Float32},VecUnroll{1, 8, Float32, Vec{8, Float32}}})   # time: 0.0212469
    Base.precompile(Tuple{typeof(which(_vload_unroll,(LayoutPointers.AbstractStridedPointer{T<:Union{Bool, Float16, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, SIMDTypes.Bit}, N, C, B, R, X, O} where {R, X<:Tuple{Vararg{Integer, N}}, O<:Tuple{Vararg{Integer, N}}},VectorizationBase.Unroll{AU, F, UN, AV, W, M, UX, I<:Union{Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt, VectorizationBase.LazyMulAdd{var"#s33", var"#s32", var"#s31"} where {var"#s33", var"#s32", var"#s31"<:Union{Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt}}, Union{VectorizationBase.LazyMulAdd{var"#s33", var"#s32", var"#s31"} where {var"#s33", var"#s32", var"#s31"<:Union{VectorizationBase.MM{W, X, I} where {X, I<:Union{Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt}}, VectorizationBase.Vec{W, T} where T}}, VectorizationBase.MM{W, X, I} where {X, I<:Union{Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt}}, VectorizationBase.Vec{W, T} where T} where W}},A<:Static.StaticBool,Static.StaticInt{RS},Static.StaticInt{X},)).generator.gen),Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Type,Type,Any})   # time: 0.0211922
    Base.precompile(Tuple{typeof(which(contract_add,(VectorizationBase.VecUnroll{N, W, T, V} where {W, T, V<:Union{Bool, Float16, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, SIMDTypes.Bit, VectorizationBase.AbstractSIMD{W, T}}},Static.StaticInt{C},)).generator.gen),Any,Any,Any,Any,Any})   # time: 0.0205866
    Base.precompile(Tuple{typeof(vsum),VecUnroll{1, 8, Float32, Vec{8, Float32}}})   # time: 0.0140413
    Base.precompile(Tuple{typeof(gep),Ptr{Float32},LazyMulAdd{4, 0, Int64}})   # time: 0.0130553
    Base.precompile(Tuple{typeof(precalc_quote_from_descript),Tuple{Int64, Int64},Int64,Core.SimpleVector})   # time: 0.0128908
    Base.precompile(Tuple{Type{Unroll{1, 8, 4, 1, 8, 0x0000000000000000, 1, I} where I},LazyMulAdd{4, 0, Int64}})   # time: 0.0108432
    Base.precompile(Tuple{typeof(which(collapse_add,(VectorizationBase.VecUnroll{N, W, T, V} where {W, T, V<:Union{Bool, Float16, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, SIMDTypes.Bit, VectorizationBase.AbstractSIMD{W, T}}},)).generator.gen),Any,Any,Any})   # time: 0.0101125
    Base.precompile(Tuple{typeof(which(_vstore_unroll!,(LayoutPointers.AbstractStridedPointer{T, D, C, B, R, X, O} where {R, X<:Tuple{Vararg{Integer, D}}, O<:Tuple{Vararg{Integer, D}}},VectorizationBase.VecUnroll{Nm1, W, VUT, var"#s31"} where var"#s31"<:Union{Bool, Float16, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, SIMDTypes.Bit, VectorizationBase.AbstractSIMDVector},VectorizationBase.Unroll{AU, F, N, AV, W, M, UX, I<:Union{Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt, VectorizationBase.LazyMulAdd{var"#s33", var"#s32", var"#s31"} where {var"#s33", var"#s32", var"#s31"<:Union{Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt}}, Union{VectorizationBase.LazyMulAdd{var"#s33", var"#s32", var"#s31"} where {var"#s33", var"#s32", var"#s31"<:Union{VectorizationBase.MM{W, X, I} where {X, I<:Union{Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt}}, VectorizationBase.Vec{W, T} where T}}, VectorizationBase.MM{W, X, I} where {X, I<:Union{Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt}}, VectorizationBase.Vec{W, T} where T} where W}},A<:Static.StaticBool,S<:Static.StaticBool,NT<:Static.StaticBool,Static.StaticInt{RS},Static.StaticInt{X},)).generator.gen),Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Type,Type,Type,Type,Any})   # time: 0.009386
    Base.precompile(Tuple{typeof(which(_vload_unroll,(LayoutPointers.AbstractStridedPointer{T, D, C, B, R, X, O} where {R, X<:Tuple{Vararg{Integer, D}}, O<:Tuple{Vararg{Integer, D}}},VectorizationBase.Unroll{AU, F, N, AV, W, M, UX, I<:Union{Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt, VectorizationBase.LazyMulAdd{var"#s33", var"#s32", var"#s31"} where {var"#s33", var"#s32", var"#s31"<:Union{Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt}}, Union{VectorizationBase.LazyMulAdd{var"#s33", var"#s32", var"#s31"} where {var"#s33", var"#s32", var"#s31"<:Union{VectorizationBase.MM{W, X, I} where {X, I<:Union{Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt}}, VectorizationBase.Vec{W, T} where T}}, VectorizationBase.MM{W, X, I} where {X, I<:Union{Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt}}, VectorizationBase.Vec{W, T} where T} where W}},VectorizationBase.EVLMask{W, U} where U,A<:Static.StaticBool,Static.StaticInt{RS},Static.StaticInt{X},)).generator.gen),Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Type,Type,Any})   # time: 0.0080208
    Base.precompile(Tuple{typeof(Base.FastMath.add_fast),VecUnroll{7, 8, Float32, Vec{8, Float32}},VecUnroll{7, 8, Float32, Vec{8, Float32}}})   # time: 0.0079278
    Base.precompile(Tuple{typeof(which(_gep,(Ptr{T<:Union{Bool, Float16, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, SIMDTypes.Bit}},Static.StaticInt{N},Static.StaticInt{RS},)).generator.gen),Any,Any,Any,Any,Any,Type,Any})   # time: 0.007611
    Base.precompile(Tuple{typeof(which(lazymul,(Static.StaticInt{I},Any,Tuple{Vararg{Any, N}},)).generator.gen),Any,Any,Any,Any,Any,Any})   # time: 0.0064736
    Base.precompile(Tuple{typeof(precalc_quote_from_descript),Tuple{Int64},Int64,Core.SimpleVector})   # time: 0.0060488
    Base.precompile(Tuple{typeof(which(__vstore!,(Ptr{T<:Union{Bool, Float16, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8}},V<:VectorizationBase.AbstractSIMDVector{W, VT<:Union{Bool, Float16, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, SIMDTypes.Bit}},I<:Union{Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt, VectorizationBase.LazyMulAdd{var"#s33", var"#s32", var"#s31"} where {var"#s33", var"#s32", var"#s31"<:Union{Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt}}, Union{VectorizationBase.LazyMulAdd{var"#s33", var"#s32", var"#s31"} where {var"#s33", var"#s32", var"#s31"<:Union{VectorizationBase.MM{W, X, I} where {X, I<:Union{Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt}}, VectorizationBase.Unroll{var"#s33", var"#s32", var"#s31", var"#s30", W, M, X, I} where {var"#s33", var"#s32", var"#s31", var"#s30", M, X, I}, VectorizationBase.Vec{W, T} where T}}, VectorizationBase.MM{W, X, I} where {X, I<:Union{Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt}}, VectorizationBase.Unroll{var"#s33", var"#s32", var"#s31", var"#s30", W, M, X, I} where {var"#s33", var"#s32", var"#s31", var"#s30", M, X, I}, VectorizationBase.Vec{W, T} where T} where W},VectorizationBase.AbstractMask{W, U} where U<:Union{UInt128, UInt16, UInt32, UInt64, UInt8},A<:Static.StaticBool,S<:Static.StaticBool,NT<:Static.StaticBool,Static.StaticInt{RS},)).generator.gen),Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Type,Type,Type,Any})   # time: 0.0056754
    Base.precompile(Tuple{typeof(Base.FastMath.add_fast),VecUnroll{7, 4, Float64, Vec{4, Float64}},VecUnroll{7, 4, Float64, Vec{4, Float64}}})   # time: 0.0055129
    Base.precompile(Tuple{typeof(which(_mask_cmp,(Union{Val{W}, Static.StaticInt{W}},I<:Integer,Static.StaticInt{RS},Static.True,)).generator.gen),Any,Any,Any,Any,Type,Any,Type,Any})   # time: 0.0054208
    Base.precompile(Tuple{typeof(which(_vstore!,(G<:Function,LayoutPointers.AbstractStridedPointer{T, D, C, B, R, X, O} where {B, R, X<:Tuple{Vararg{Integer, D}}, O<:Tuple{Vararg{Integer, D}}},VectorizationBase.VecUnroll{U, W, T, V} where {T, V<:Union{Bool, Float16, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, SIMDTypes.Bit, VectorizationBase.AbstractSIMD{W, T}}},VectorizationBase.Unroll{AU, F, N, AV, 1, M, X, I},A<:Static.StaticBool,S<:Static.StaticBool,NT<:Static.StaticBool,Static.StaticInt{RS},)).generator.gen),Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Type,Any,Any,Any,Type,Type,Type,Any})   # time: 0.0051711
    Base.precompile(Tuple{typeof(Base.FastMath.mul_fast),VecUnroll{1, 8, Float32, Vec{8, Float32}},VecUnroll{1, 8, Float32, Vec{8, Float32}}})   # time: 0.0051513
    Base.precompile(Tuple{typeof(>=),UInt64,MM{4, 1, UInt64}})   # time: 0.0050024
    Base.precompile(Tuple{typeof(which(__vstore!,(Ptr{T<:Union{Bool, Float16, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8}},V<:VectorizationBase.AbstractSIMDVector{W, VT<:Union{Bool, Float16, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, SIMDTypes.Bit}},I<:Union{Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt, VectorizationBase.LazyMulAdd{var"#s33", var"#s32", var"#s31"} where {var"#s33", var"#s32", var"#s31"<:Union{Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt}}, Union{VectorizationBase.LazyMulAdd{var"#s33", var"#s32", var"#s31"} where {var"#s33", var"#s32", var"#s31"<:Union{VectorizationBase.MM{W, X, I} where {X, I<:Union{Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt}}, VectorizationBase.Unroll{var"#s33", var"#s32", var"#s31", var"#s30", W, M, X, I} where {var"#s33", var"#s32", var"#s31", var"#s30", M, X, I}, VectorizationBase.Vec{W, T} where T}}, VectorizationBase.MM{W, X, I} where {X, I<:Union{Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt}}, VectorizationBase.Unroll{var"#s33", var"#s32", var"#s31", var"#s30", W, M, X, I} where {var"#s33", var"#s32", var"#s31", var"#s30", M, X, I}, VectorizationBase.Vec{W, T} where T} where W},A<:Static.StaticBool,S<:Static.StaticBool,NT<:Static.StaticBool,Static.StaticInt{RS},)).generator.gen),Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Type,Type,Type,Any})   # time: 0.0049772
    Base.precompile(Tuple{typeof(vfmadd_fast),VecUnroll{1, 4, Float64, Vec{4, Float64}},Vec{4, Float64},VecUnroll{1, 4, Float64, Vec{4, Float64}}})   # time: 0.0040119
    Base.precompile(Tuple{typeof(which(__vload,(Ptr{T<:Union{Bool, Float16, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, SIMDTypes.Bit}},I<:Union{Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt, VectorizationBase.LazyMulAdd{var"#s33", var"#s32", var"#s31"} where {var"#s33", var"#s32", var"#s31"<:Union{Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt}}, Union{VectorizationBase.LazyMulAdd{var"#s33", var"#s32", var"#s31"} where {var"#s33", var"#s32", var"#s31"<:Union{VectorizationBase.MM{W, X, I} where {X, I<:Union{Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt}}, VectorizationBase.Unroll{var"#s33", var"#s32", var"#s31", var"#s30", W, M, X, I} where {var"#s33", var"#s32", var"#s31", var"#s30", M, X, I}, VectorizationBase.Vec{W, T} where T}}, VectorizationBase.MM{W, X, I} where {X, I<:Union{Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt}}, VectorizationBase.Unroll{var"#s33", var"#s32", var"#s31", var"#s30", W, M, X, I} where {var"#s33", var"#s32", var"#s31", var"#s30", M, X, I}, VectorizationBase.Vec{W, T} where T} where W},A<:Static.StaticBool,Static.StaticInt{RS},)).generator.gen),Any,Any,Any,Any,Any,Any,Any,Type,Any})   # time: 0.0038525
    Base.precompile(Tuple{var"##s2#3",Any,Any,Any,Any})   # time: 0.0034175
    Base.precompile(Tuple{typeof(which(vadd_nw,(T<:Union{Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8},T<:Union{Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8},)).generator.gen),Any,Any,Any,Any})   # time: 0.0030512
    Base.precompile(Tuple{typeof(vfmadd_fast),VecUnroll{3, 4, Float64, Vec{4, Float64}},VecUnroll{3, 4, Float64, Vec{4, Float64}},VecUnroll{3, 4, Float64, Vec{4, Float64}}})   # time: 0.0026259
    Base.precompile(Tuple{typeof(which(_vzero,(Type{VectorizationBase.VecUnroll{N, W, T, V}},Static.StaticInt{RS},)).generator.gen),Any,Any,Any,Any,Any,Any,Type,Any})   # time: 0.0025778
    Base.precompile(Tuple{typeof(which(staticunrolledvectorstride,(T,VectorizationBase.Unroll{AU, F, UN, AV, W, M, X, I} where I,)).generator.gen),Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any})   # time: 0.0025455
    Base.precompile(Tuple{typeof(transpose_vecunroll),VecUnroll{1, 1, Float64, Float64}})   # time: 0.0024225
    Base.precompile(Tuple{typeof(shuffle_load_quote),Type{Float64},NTuple{9, Int64},Type{LazyMulAdd{8, 0, Int64}},Bool,Int64,UInt64})   # time: 0.002003
    Base.precompile(Tuple{typeof(Base.FastMath.mul_fast),VecUnroll{1, 4, Float64, Vec{4, Float64}},VecUnroll{1, 4, Float64, Vec{4, Float64}}})   # time: 0.0019952
    Base.precompile(Tuple{typeof(shuffle_load_quote),Type{Float32},NTuple{9, Int64},Type{LazyMulAdd{4, 0, Int64}},Bool,Int64,UInt64})   # time: 0.0019512
    Base.precompile(Tuple{typeof(which(valrem,(Union{Val{W}, Static.StaticInt{W}},T<:Integer,)).generator.gen),Any,Any,Any,Any,Any})   # time: 0.0018969
    Base.precompile(Tuple{typeof(which(zero_vecunroll,(Static.StaticInt{N},Static.StaticInt{W},Type{T},Static.StaticInt{RS},)).generator.gen),Any,Any,Any,Any,Any,Type,Type,Type,Any})   # time: 0.0016746
    Base.precompile(Tuple{typeof(shuffle_store_quote),Type{Float32},NTuple{9, Int64},Type{LazyMulAdd{4, 0, Int64}},Bool,Bool,Bool,Int64,Bool})   # time: 0.001526
    Base.precompile(Tuple{typeof(vsum),VecUnroll{1, 4, Float64, Vec{4, Float64}}})   # time: 0.0013349
    Base.precompile(Tuple{typeof(shuffle_load_quote),Type{Float64},NTuple{9, Int64},Type{Int64},Bool,Int64,UInt64})   # time: 0.0012939
    Base.precompile(Tuple{typeof(shuffle_store_quote),Type{Float32},NTuple{9, Int64},Type{Int64},Bool,Bool,Bool,Int64,Bool})   # time: 0.0011416
    Base.precompile(Tuple{typeof(shuffle_store_quote),Type{Float32},NTuple{9, Int64},Type{LazyMulAdd{2, 0, Int64}},Bool,Bool,Bool,Int64,Bool})   # time: 0.001135
    Base.precompile(Tuple{typeof(shuffle_load_quote),Type{Float32},NTuple{9, Int64},Type{LazyMulAdd{2, 0, Int64}},Bool,Int64,UInt64})   # time: 0.001118
    Base.precompile(Tuple{typeof(shuffle_load_quote),Type{Float32},NTuple{9, Int64},Type{Int64},Bool,Int64,UInt64})   # time: 0.0011005
    Base.precompile(Tuple{typeof(index_summary),Type{LazyMulAdd{2, 0, Int64}}})   # time: 0.0010961
    Base.precompile(Tuple{typeof(which(vadd,(VectorizationBase.Vec{W, T<:Union{Float32, Float64}},VectorizationBase.Vec{W, T<:Union{Float32, Float64}},)).generator.gen),Any,Any,Any,Any,Any})   # time: 0.0010745
    Base.precompile(Tuple{typeof(which(__vstore!,(Ptr{T<:Union{Bool, Float16, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8}},VT<:Union{Bool, Float16, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, SIMDTypes.Bit},I<:Union{Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt, VectorizationBase.LazyMulAdd{var"#s33", var"#s32", var"#s31"} where {var"#s33", var"#s32", var"#s31"<:Union{Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt}}, Union{VectorizationBase.LazyMulAdd{var"#s33", var"#s32", var"#s31"} where {var"#s33", var"#s32", var"#s31"<:Union{VectorizationBase.MM{W, X, I} where {X, I<:Union{Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt}}, VectorizationBase.Unroll{var"#s33", var"#s32", var"#s31", var"#s30", W, M, X, I} where {var"#s33", var"#s32", var"#s31", var"#s30", M, X, I}, VectorizationBase.Vec{W, T} where T}}, VectorizationBase.MM{W, X, I} where {X, I<:Union{Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, Static.StaticInt}}, VectorizationBase.Unroll{var"#s33", var"#s32", var"#s31", var"#s30", W, M, X, I} where {var"#s33", var"#s32", var"#s31", var"#s30", M, X, I}, VectorizationBase.Vec{W, T} where T} where W},A<:Static.StaticBool,S<:Static.StaticBool,NT<:Static.StaticBool,Static.StaticInt{RS},)).generator.gen),Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Type,Type,Type,Any})   # time: 0.0010738
    Base.precompile(Tuple{typeof(shuffle_store_quote),Type{Float64},NTuple{9, Int64},Type{LazyMulAdd{2, 0, Int64}},Bool,Bool,Bool,Int64,Bool})   # time: 0.0010267
    Base.precompile(Tuple{typeof(vsub_nsw),UInt64,UInt32})   # time: 0.0010238
end
